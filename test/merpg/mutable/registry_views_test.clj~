(ns merpg.mutable.registry-views-test
  (:require [clojure.pprint :refer :all]
            [clojure.test :refer :all]
            [merpg.mutable.registry :as re]
            [merpg.mutable.registry-views :refer [layer-ids registry-to-layer
                                                  layers-view] :as rv]
            [merpg.mutable.maps :as m]))

(deftest testing-layer-partitioning
  (binding [re/registry (atom {})]
    (let [map-id (m/map! 4 4 2)
          registry @re/registry
          layer-ids (layer-ids registry map-id)
          first-layer (first (map (partial registry-to-layer registry) layer-ids))]
      
      (dotimes [x 4]
        (dotimes [y 4]
          (let [{:keys [map-x map-y]} (get-in first-layer [x y])]
            (is [x y] [map-x map-y])))))))

(deftest testing-layers-view
  (binding [re/registry (atom {})]
    (let [map-id (m/map! 4 4 2)
          anothermap-id (m/map! 5 5 2)
          layers @layers-view
          w (-> layers
                flatten
                (rv/highest-key :map-x)
                inc)
          h (-> layers
                flatten
                (rv/highest-key :map-y)
                inc)]
      (dotimes [x w]
        (dotimes [y h]
          (is [x y] [(-> layers
                         (get-in [x y])
                         :map-x)
                     (-> layers
                         (get-in [x y])
                         :map-y)]))))))

(deftest renderable-layers-of-test
  ;; ääliö
  ;; luot sit atomin uudestaan etkä määrittele watchia, joka raportoisi muutokset eventtistriimiin
  (binding [re/registry (atom {})]
    (let [map1 (m/map! 5 5 6)
          ;; map2 (m/map! 2 2 3)
          ]
      ;; (Thread/sleep 1000)
      ;; (pprint (rv/renderable-layers-of! map1))
      (pprint @rv/local-registry)
      (println "!")
      (println map1)
      (pprint @rv/layers-view)
      ;; (println (class map1))
      (are [x y] (= x y)
        (count (rv/renderable-layers-of! map1)) 6
        ;; (count (rv/renderable-layers-of! map2)) 3
        ))))

(binding [re/registry (atom {})]
  (let [id (m/map! 3 3 2)]
    id
    (->> rv/layers-view
         deref
         pprint)
    ;; (def asdfg @rv/layers-view)))
    ;; (->> id
    ;;      rv/renderable-layers-of!
    ;;      pprint)
    ))

(run-tests)
